<?php

/**
 * This file is part of error-handler
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Slick\ErrorHandler;

use ErrorException;
use InvalidArgumentException;
use Slick\ErrorHandler\Handler\HandlerInterface;
use Throwable;

/**
 * RunnerInterface
 *
 * @package Slick\ErrorHandler
 */
interface RunnerInterface
{

    const EXCEPTION_HANDLER = "handleException";
    const ERROR_HANDLER     = "handleError";
    const SHUTDOWN_HANDLER  = "handleShutdown";

    /**
     * Pushes a handler to the end of the stack
     *
     * @throws InvalidArgumentException  If argument is not callable or instance of HandlerInterface
     * @param  callable|HandlerInterface $handler
     * @return self
     */
    public function pushHandler(callable|HandlerInterface $handler): self;

    /**
     * Returns an array with all handlers, in the
     * order they were added to the stack.
     *
     * @return array<callable|HandlerInterface>
     */
    public function getHandlers(): array;

    /**
     * Clears all handlers in the handlerStack.
     *
     * @return self
     */
    public function clearHandlers(): self;

    /**
     * Registers this instance as an error handler.
     *
     * @return self
     */
    public function register(): self;

    /**
     * Unregisters all handlers registered by current instance
     *
     * @return self
     */
    public function unregister(): self;

    /**
     * Handles an exception, ultimately generating an error
     * page.
     *
     * @param  Throwable $exception
     * @return string    Output generated by handlers
     */
    public function handleException(Throwable $exception): string;

    /**
     * Converts generic PHP errors to \ErrorException
     * instances, before passing them off to be handled.
     *
     * This method MUST be compatible with set_error_handler.
     *
     * @param int    $level
     * @param string $message
     * @param string|null $file
     * @param int|null $line
     *
     * @return bool
     * @throws ErrorException
     */
    public function handleError(int $level, string $message, ?string $file = null, ?int $line = null): bool;

    /**
     * Special case to deal with Fatal errors and the like.
     */
    public function handleShutdown(): void;

    /**
     * Outputs the given headers to the client.
     *
     * @param array<string, string> $headers The array of headers to be sent
     *
     * @return void
     */
    public function outputHeaders(array $headers): void;

    public function sendResponseCode(int $code): void;
}
